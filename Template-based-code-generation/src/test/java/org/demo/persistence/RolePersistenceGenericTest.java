/*
 * Created on 2021-01-14 ( Date ISO 2021-01-14 - Time 12:43:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */
package org.demo.persistence;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.demo.data.record.RoleRecord ;
import org.demo.persistence.RolePersistence;

/**
 * Generic test class for a persistence service
 * 
 * @author Telosys 
 *
 */
public class RolePersistenceGenericTest {

	/**
	 * Persistence service generic test for a record with an auto-incremented key
	 * @param persistenceService
	 * @throws SQLException
	 */
	public void testPersistenceServiceWithAutoincrementedKey(RolePersistence persistenceService) {
    	System.out.println("--- test RolePersistence ");

		long initialCount = persistenceService.countAll() ;
    	System.out.println("Initial count = " + initialCount );

    	//--- CREATE #1
    	RoleRecord record = new RoleRecord();
		// Set initial values ( auto-incremented key : nothing to set in the Primary Key )
		record.setMyfield("A"); // "myfield" : java.lang.String
		record.setCreationDate(java.sql.Date.valueOf("2001-06-22")); // "creationDate" : java.util.Date
		record.setRelationship("A"); // "relationship" : java.lang.String
    	System.out.println("Create : " + record);
    	persistenceService.create(record);
		// Retrieve the generated id 
		int generatedId = record.getId() ;
    	System.out.println("Generated id #1 = " + generatedId ); 
    	assertTrue( persistenceService.exists(generatedId) );
		assertTrue( persistenceService.exists(record) );
		long count = persistenceService.countAll() ;
    	System.out.println("Count = " + count );
		assertEquals(initialCount+1, count );

    	//--- CREATE #2
		record = new RoleRecord();  // A new instance is mandatory for JPA 
		// Set initial values ( auto-incremented key : nothing to set in the Primary Key )
		record.setMyfield("A"); // "myfield" : java.lang.String
		record.setCreationDate(java.sql.Date.valueOf("2001-06-22")); // "creationDate" : java.util.Date
		record.setRelationship("A"); // "relationship" : java.lang.String
		persistenceService.create(record);
		// Retrieve the generated id 
		int generatedId2 = record.getId() ;
    	System.out.println("Generated id #2 = " + generatedId2 ); 
    	int nextId = generatedId ; nextId++ ;
		assertEquals(nextId, generatedId2 );

    	//--- CREATE #3
		record = new RoleRecord();  // A new instance is mandatory for JPA 
		// Set initial values ( auto-incremented key : nothing to set in the Primary Key )
		record.setMyfield("A"); // "myfield" : java.lang.String
		record.setCreationDate(java.sql.Date.valueOf("2001-06-22")); // "creationDate" : java.util.Date
		record.setRelationship("A"); // "relationship" : java.lang.String
		persistenceService.create(record);
		// Retrieve the generated id 
		int generatedId3 = record.getId() ;
    	System.out.println("Generated id #3 = " + generatedId3 ); 
    	int nextId2 = generatedId2 ; nextId2++ ;
		assertEquals(nextId2, generatedId3 );

    	//--- FIND #1
    	System.out.println("Find by id #1 ..." );
    	RoleRecord record1 = persistenceService.findById(generatedId);
    	System.out.println("Found : " + record1 );
    	assertNotNull(record1);
    	assertTrue( persistenceService.exists(record1) ) ;

    	//--- FIND #2
    	System.out.println("Find by id #2 ..." );
    	RoleRecord record2 = persistenceService.findById(generatedId2);
    	System.out.println("Found : " + record2 );
    	assertNotNull(record2);
    	assertTrue( persistenceService.exists(record2) ) ;

    	//--- UPDATE
		//--- Change values
		record2.setMyfield("B"); // "myfield" : java.lang.String
		record2.setCreationDate(java.sql.Date.valueOf("2002-06-22")); // "creationDate" : java.util.Date
		record2.setRelationship("B"); // "relationship" : java.lang.String
    	System.out.println("Update : " + record2 );
    	assertTrue( persistenceService.update(record2) );

    	//--- RELOAD AFTER UPDATE
    	System.out.println("Find by id..." );
    	RoleRecord record2reloaded = persistenceService.findById(generatedId2);
    	assertNotNull(record2reloaded);
    	System.out.println("Found : " + record2reloaded );

		// Check same data in the reloaded instance
		assertEquals(record2.getMyfield(), record2reloaded.getMyfield() ); 
		assertEquals(record2.getCreationDate(), record2reloaded.getCreationDate() ); 
		assertEquals(record2.getRelationship(), record2reloaded.getRelationship() ); 

    	//--- DELETE
    	System.out.println("Delete : " + record2 );
    	assertTrue(  persistenceService.delete(record2) ); // First delete : OK
    	assertFalse( persistenceService.delete(record2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(generatedId2) ); // Nothing (already deleted)

	}
}
