/*
 * verity-rest-api
 * # The REST API for Verity  ## Introduction This is the REST API for Verity - Evernym's platform for Verifiable Credential exchange. With Verity you can enable SSI (Self-sovereign Identity) into your project which is based on Decentralized Identifiers (DIDs) and Verifiable Credentials (VCs).  The Verifiable Credentials data model defines Issuer, Verifier and the Holder. Issuer is an organization that creates and issues Verifiable Credentials to individuals, also known as Holders. Holders typically have a digital wallet app to store credentials securely and control how those credentials are being shared with Verifiers. Verifier is an organization that verifies information from the credentials that Holders have stored on their digital wallet app.  With Verity REST API, you can enable issuing or verifying or both functions into your project and interact with individuals using Connect.Me or some other compatible digital wallet app.  Verity REST API exposes endpoints that enable you to initiate basic SSI protocols such are establishing a DID connection between your organization and individuals, issuing a Verifiable Credential to individual and requesting and validating Proofs from individuals. SSI interactions are asynchronous in its nature, therefore we have decided to that these endpoints follow the same async pattern. Besides SSI protocols, Verity REST API exposes endpoints for writing Schemas and Credential Definitions to the ledger.  ## Authentication In order to use the Verity REST API, you'll need to use API key. API key is currently provisioned by Evernym. Contact Evernym to obtain your API key. In case you are already a Verity SDK user, you may use a method in SDK to create an API key for REST API.  ## How to use REST API After obtaining an endpoint and API key for your from Evernym, there are few API calls that you'll need to make before you can invoke SSI protocols. Firstly you'll need to call the UpdateEndpoint to register a webhook where you'll be receiving callbacks from your Verity Server. If you plan to issue credentials to individuals, you'll also need to set up your Issuer Identity. This you can do by calling IssuerSetup endpoint. The callback that you'll receive contains a DID and Verkey. This DID and Verkey represents your Issuer Identity and must be written to the ledger, using the Sovrin Self-Serve Website (https://selfserve.sovrin.org) for the Sovrin StagingNet. The DID and Verkey must be transferred accurately to the self-serve site. Once that is done, you may want to set your Organizational name and logo that will be shown on the Connect.Me or other compatible wallet apps by calling the UpdateConfigs endpoint and after that you may start to create Schema, Credential Definition and interact with individuals using SSI protocols. Before you can issue credentials to individuals or request proofs from them, you need to establish a DID connection by calling a Relationship endpoint. ## Useful links [Tutorials](https://github.com/evernym/verity-sdk/tree/master/docs/howto)  [Code samples](https://github.com/evernym/verity-sdk/tree/master/samples/rest-api)  [Protocol and message identification](https://github.com/evernym/verity-sdk/blob/master/docs/howto/Protocol-and-Message-Identification-in-Verity.md)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
/**
 * SendOffer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-15T21:51:02.728Z[GMT]")
public class SendOffer implements OneOfbody1 {
  @SerializedName("@type")
  private String _atType = "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/offer";

  @SerializedName("@id")
  private UUID _atId = null;

  @SerializedName("~for_relationship")
  private String forRelationship = null;

  @SerializedName("cred_def_id")
  private String credDefId = null;

  @SerializedName("credential_values")
  private Map<String, String> credentialValues = new HashMap<String, String>();

  @SerializedName("price")
  private String price = "0";

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("auto_issue")
  private Boolean autoIssue = false;

  @SerializedName("by_invitation")
  private Boolean byInvitation = false;

  public SendOffer _atType(String _atType) {
    this._atType = _atType;
    return this;
  }

   /**
   * Get _atType
   * @return _atType
  **/
  @Schema(example = "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/offer", required = true, description = "")
  public String getAtType() {
    return _atType;
  }

  public void setAtType(String _atType) {
    this._atType = _atType;
  }

  public SendOffer _atId(UUID _atId) {
    this._atId = _atId;
    return this;
  }

   /**
   * random id
   * @return _atId
  **/
  @Schema(example = "0729a580-2240-11e6-9eb5-0002a5d5c51b", required = true, description = "random id")
  public UUID getAtId() {
    return _atId;
  }

  public void setAtId(UUID _atId) {
    this._atId = _atId;
  }

  public SendOffer forRelationship(String forRelationship) {
    this.forRelationship = forRelationship;
    return this;
  }

   /**
   * DID returned from CreateRelationship request
   * @return forRelationship
  **/
  @Schema(example = "YBXSwfA9GFgkb9xDeDvMUf", required = true, description = "DID returned from CreateRelationship request")
  public String getForRelationship() {
    return forRelationship;
  }

  public void setForRelationship(String forRelationship) {
    this.forRelationship = forRelationship;
  }

  public SendOffer credDefId(String credDefId) {
    this.credDefId = credDefId;
    return this;
  }

   /**
   * id of credential definition used
   * @return credDefId
  **/
  @Schema(example = "KwgzAuJxWTZMJwfN7pbX6P:3:CL:104:tag", required = true, description = "id of credential definition used")
  public String getCredDefId() {
    return credDefId;
  }

  public void setCredDefId(String credDefId) {
    this.credDefId = credDefId;
  }

  public SendOffer credentialValues(Map<String, String> credentialValues) {
    this.credentialValues = credentialValues;
    return this;
  }

  public SendOffer putCredentialValuesItem(String key, String credentialValuesItem) {
    this.credentialValues.put(key, credentialValuesItem);
    return this;
  }

   /**
   * JSON, key-value pairs of credential values
   * @return credentialValues
  **/
  @Schema(required = true, description = "JSON, key-value pairs of credential values")
  public Map<String, String> getCredentialValues() {
    return credentialValues;
  }

  public void setCredentialValues(Map<String, String> credentialValues) {
    this.credentialValues = credentialValues;
  }

  public SendOffer price(String price) {
    this.price = price;
    return this;
  }

   /**
   * price of credential
   * @return price
  **/
  @Schema(example = "0", description = "price of credential")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public SendOffer comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * comment
   * @return comment
  **/
  @Schema(example = "Some comment", description = "comment")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public SendOffer autoIssue(Boolean autoIssue) {
    this.autoIssue = autoIssue;
    return this;
  }

   /**
   * Enable auto issue when other party accepts credential offer. AskAccept message would not be received.
   * @return autoIssue
  **/
  @Schema(example = "true", description = "Enable auto issue when other party accepts credential offer. AskAccept message would not be received.")
  public Boolean isAutoIssue() {
    return autoIssue;
  }

  public void setAutoIssue(Boolean autoIssue) {
    this.autoIssue = autoIssue;
  }

  public SendOffer byInvitation(Boolean byInvitation) {
    this.byInvitation = byInvitation;
    return this;
  }

   /**
   * Initiate Out-Of-Band protocol for credential issuance. Receive InviteURL that can be converted into QR code and that contains Credential Offer
   * @return byInvitation
  **/
  @Schema(description = "Initiate Out-Of-Band protocol for credential issuance. Receive InviteURL that can be converted into QR code and that contains Credential Offer")
  public Boolean isByInvitation() {
    return byInvitation;
  }

  public void setByInvitation(Boolean byInvitation) {
    this.byInvitation = byInvitation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendOffer sendOffer = (SendOffer) o;
    return Objects.equals(this._atType, sendOffer._atType) &&
        Objects.equals(this._atId, sendOffer._atId) &&
        Objects.equals(this.forRelationship, sendOffer.forRelationship) &&
        Objects.equals(this.credDefId, sendOffer.credDefId) &&
        Objects.equals(this.credentialValues, sendOffer.credentialValues) &&
        Objects.equals(this.price, sendOffer.price) &&
        Objects.equals(this.comment, sendOffer.comment) &&
        Objects.equals(this.autoIssue, sendOffer.autoIssue) &&
        Objects.equals(this.byInvitation, sendOffer.byInvitation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_atType, _atId, forRelationship, credDefId, credentialValues, price, comment, autoIssue, byInvitation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendOffer {\n");
    
    sb.append("    _atType: ").append(toIndentedString(_atType)).append("\n");
    sb.append("    _atId: ").append(toIndentedString(_atId)).append("\n");
    sb.append("    forRelationship: ").append(toIndentedString(forRelationship)).append("\n");
    sb.append("    credDefId: ").append(toIndentedString(credDefId)).append("\n");
    sb.append("    credentialValues: ").append(toIndentedString(credentialValues)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    autoIssue: ").append(toIndentedString(autoIssue)).append("\n");
    sb.append("    byInvitation: ").append(toIndentedString(byInvitation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
