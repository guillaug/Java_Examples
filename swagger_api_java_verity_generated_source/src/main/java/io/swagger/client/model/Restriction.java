/*
 * verity-rest-api
 * # The REST API for Verity  ## Introduction This is the REST API for Verity - Evernym's platform for Verifiable Credential exchange. With Verity you can enable SSI (Self-sovereign Identity) into your project which is based on Decentralized Identifiers (DIDs) and Verifiable Credentials (VCs).  The Verifiable Credentials data model defines Issuer, Verifier and the Holder. Issuer is an organization that creates and issues Verifiable Credentials to individuals, also known as Holders. Holders typically have a digital wallet app to store credentials securely and control how those credentials are being shared with Verifiers. Verifier is an organization that verifies information from the credentials that Holders have stored on their digital wallet app.  With Verity REST API, you can enable issuing or verifying or both functions into your project and interact with individuals using Connect.Me or some other compatible digital wallet app.  Verity REST API exposes endpoints that enable you to initiate basic SSI protocols such are establishing a DID connection between your organization and individuals, issuing a Verifiable Credential to individual and requesting and validating Proofs from individuals. SSI interactions are asynchronous in its nature, therefore we have decided to that these endpoints follow the same async pattern. Besides SSI protocols, Verity REST API exposes endpoints for writing Schemas and Credential Definitions to the ledger.  ## Authentication In order to use the Verity REST API, you'll need to use API key. API key is currently provisioned by Evernym. Contact Evernym to obtain your API key. In case you are already a Verity SDK user, you may use a method in SDK to create an API key for REST API.  ## How to use REST API After obtaining an endpoint and API key for your from Evernym, there are few API calls that you'll need to make before you can invoke SSI protocols. Firstly you'll need to call the UpdateEndpoint to register a webhook where you'll be receiving callbacks from your Verity Server. If you plan to issue credentials to individuals, you'll also need to set up your Issuer Identity. This you can do by calling IssuerSetup endpoint. The callback that you'll receive contains a DID and Verkey. This DID and Verkey represents your Issuer Identity and must be written to the ledger, using the Sovrin Self-Serve Website (https://selfserve.sovrin.org) for the Sovrin StagingNet. The DID and Verkey must be transferred accurately to the self-serve site. Once that is done, you may want to set your Organizational name and logo that will be shown on the Connect.Me or other compatible wallet apps by calling the UpdateConfigs endpoint and after that you may start to create Schema, Credential Definition and interact with individuals using SSI protocols. Before you can issue credentials to individuals or request proofs from them, you need to establish a DID connection by calling a Relationship endpoint. ## Useful links [Tutorials](https://github.com/evernym/verity-sdk/tree/master/docs/howto)  [Code samples](https://github.com/evernym/verity-sdk/tree/master/samples/rest-api)  [Protocol and message identification](https://github.com/evernym/verity-sdk/blob/master/docs/howto/Protocol-and-Message-Identification-in-Verity.md)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Restriction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-15T21:51:02.728Z[GMT]")
public class Restriction {
  @SerializedName("schema_id")
  private String schemaId = null;

  @SerializedName("schema_issuer_did")
  private String schemaIssuerDid = null;

  @SerializedName("schema_name")
  private String schemaName = null;

  @SerializedName("schema_version")
  private String schemaVersion = null;

  @SerializedName("issuer_did")
  private String issuerDid = null;

  @SerializedName("cred_def_id")
  private String credDefId = null;

  public Restriction schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

   /**
   * Get schemaId
   * @return schemaId
  **/
  @Schema(example = "39YBdt6BLWLJAUPA8NvwDX:2:license:0.1", description = "")
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }

  public Restriction schemaIssuerDid(String schemaIssuerDid) {
    this.schemaIssuerDid = schemaIssuerDid;
    return this;
  }

   /**
   * Get schemaIssuerDid
   * @return schemaIssuerDid
  **/
  @Schema(example = "39YBdt6BLWLJAUPA8NvwDX", description = "")
  public String getSchemaIssuerDid() {
    return schemaIssuerDid;
  }

  public void setSchemaIssuerDid(String schemaIssuerDid) {
    this.schemaIssuerDid = schemaIssuerDid;
  }

  public Restriction schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

   /**
   * Get schemaName
   * @return schemaName
  **/
  @Schema(example = "license", description = "")
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }

  public Restriction schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Get schemaVersion
   * @return schemaVersion
  **/
  @Schema(example = "0.1", description = "")
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }

  public Restriction issuerDid(String issuerDid) {
    this.issuerDid = issuerDid;
    return this;
  }

   /**
   * Get issuerDid
   * @return issuerDid
  **/
  @Schema(example = "KwgzAuJxWTZMJwfN7pbX6P", description = "")
  public String getIssuerDid() {
    return issuerDid;
  }

  public void setIssuerDid(String issuerDid) {
    this.issuerDid = issuerDid;
  }

  public Restriction credDefId(String credDefId) {
    this.credDefId = credDefId;
    return this;
  }

   /**
   * Get credDefId
   * @return credDefId
  **/
  @Schema(example = "KwgzAuJxWTZMJwfN7pbX6P:3:CL:104:tag", description = "")
  public String getCredDefId() {
    return credDefId;
  }

  public void setCredDefId(String credDefId) {
    this.credDefId = credDefId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Restriction restriction = (Restriction) o;
    return Objects.equals(this.schemaId, restriction.schemaId) &&
        Objects.equals(this.schemaIssuerDid, restriction.schemaIssuerDid) &&
        Objects.equals(this.schemaName, restriction.schemaName) &&
        Objects.equals(this.schemaVersion, restriction.schemaVersion) &&
        Objects.equals(this.issuerDid, restriction.issuerDid) &&
        Objects.equals(this.credDefId, restriction.credDefId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaId, schemaIssuerDid, schemaName, schemaVersion, issuerDid, credDefId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Restriction {\n");
    
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    schemaIssuerDid: ").append(toIndentedString(schemaIssuerDid)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    issuerDid: ").append(toIndentedString(issuerDid)).append("\n");
    sb.append("    credDefId: ").append(toIndentedString(credDefId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
